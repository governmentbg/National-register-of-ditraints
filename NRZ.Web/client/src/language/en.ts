export default {
    appTitle: 'National register of seized properties',
    buttons: {
        back: "Back",
        confirm: "Confirm",
        close: "Close",
        cancel: "Cancel",
        save: "Save",
        search_v: {
            text: "Search",
        },
        submit: {
            text: "Submit"
        },
        new: {
            text: 'New'
        },
        add: {
            text: 'Add'
        },
        addNoneInNrsp: {
            text: 'Add items none in "NRSP"'
        }
    },
    common: {
        csi: 'Private bailiff',
        false: 'no',
        logout: 'Logout',
        no: "No",
        true: 'yes',
        useRegixNo: "Regix connection is not configured.",
        version: "Version",
        yes: "Yes",
        profile: 'Profile',
        address: 'Address',
        search_n: 'Search',
        search_v: 'Search'
    },
    user: {
        user: 'User'
    },
    createDistraint: {
        btnBack: 'Back',
        btnSave: 'Save',
        btnSearch: 'Search',
        btnStepContinue: "Continue",
        btnStepCancel: "Cancel",
        commonData: 'Common data',
        noPropertiesFoundInDB: "No properties matching the criteria are found in NRZ.",
        noPropertiesFoundInAdministrator: "No properties matching the criteria are found in data administrator.",
        propertiesFoundInDB: "Properties found in NRZ:",
        propertiesFoundInAdministrator: "Properties found in data administrator:",
        propertyIdentifier: "Property identifier",
        propertyTypeLabel: "Property type",
        searchByOwnerLabel: "Search by owner",
        searchHint: 'Search',
        searchIdentifier: 'Identifier',
        searchMinLength: 'Type in at least 3 characters to search',
        searchingPropertiesInDB: "Searching for property in NRZ ...",
        searchingPropertiesInAdmin: "Searching for property in data administrator ...",
        stepSearchProperty: "Search property",
        stepDistraintData: "Distraint data",
        stepPropertyData: "Property data",
        stepSaveDistraint: "Enforce distraint",
        suitNumber: "Suit number / future claim",
        title: "Enforce distraint",
    },
    distraints: {
        btnSearch: 'Search',
        btnNew: 'New distraint',
        list: {
            actions: "Actions",
            createdOn: "Created on",
            createdByUserType: "Created by user",
            createdByUserName: "Name",
            deactivate: "Deactivate",
            debtor: "Debtor",
            enforce: "Enforce",
            enforcementDate: "Enforcement date",
            enforcedAt: "Updated at",
            exempt: "Exempt",
            exemptionDate: "Exemption date",
            exemptedAt: "Updated at",
            id: "Id",
            identifier: 'Identifier',
            inFavourOf: "In favour of",
            location: "Property location",
            propertyId: "Property Id",
            propertyTypeName: "Property type",
            propertyRegNumber: "Property identifier",
            revoke: "Revoke",
            revocationDate: "Revocation date",
            revokedAt: "Updated at",
            statusName: "Status",
            suitNumber: "Suit number",
            view: "View",
        },
        propertyDataTitle: "Property data for: ",
        searchMinLength: 'Type in at least 3 characters to search',
        searchHint: 'Search',
        title: 'Distraints',
    },
    emailConfirm: {
        title: 'Email confirmation',
        successMessage: 'Your email was successfully confirmed',
        errorMessage: 'Възникна проблем при потвърждаването на ел. поща. Повторен имейл за потвърждение може да генерирате от вашия потребителски профил или се свържете с администратор на системата.',
        notApproved: 'Profile witih confirmed email must be approved by system administrator. After the approval it will be active and you will be able to use the system. You will recieve an email when the profile is approved.',
        approved: 'You cal log in the system with your profile'
    },
    ePayments: {
        title: 'Payment requests',
        list: {
            history: 'Request history',
            actions: 'Actions',
            id: 'Id',
            eserviceTypeName: 'E-service type',
            serviceRequestId: 'E-service id',
            paymentRequestId: 'Payment request id',
            createdAt: 'Created at',
            statusName: 'Status',
            updatedAt: 'Last updated at'
        },
        history: {
            title: 'History of payment request',
            id: 'Id',
            statusCodeName: 'Status',
            updatedAt: 'Updated at',
            eServiceTime: 'External service time',
            errors: 'Errors'
        }
    },
    errors: {
        errorChangingEServicesSettings: "Error on changing e-services settings!",
        errorCreatingDistraint: "Error on saving the distraint!",
        errorExemptingDistraint: 'Error on exempting distraint!',
        errorLoadingDistraintsList: 'Error on loading distraints list!',
        errorLoadingPaymentHistory: 'Error on loading payment request history!',
        errorLoadingPaymentsList: 'Error on loading payment requests list!',
        errorGettingPropertyTypes: "Error getting property types!",
        errorLoadingEServicesSettings: "Error on loading e-services settings!",
        errorRevokingDistraint: 'Error revoking the distraint!',
        errorSearchingCompanyInRegix: 'Error searching for company in Regix!',
        errorSearchingForDistraints: 'Error searching for distraints!',
        errorSearchingPersonInRegix: "Error searching for person in Regix!",
        errorSearchingPropertyInDB: "Error searching for property in database!",
        errorSearchingPropertyInDataAdmin: "Error searching for property in data administrator!",
        errorViewingDistraint: "Error viewing distraint!",
        getDataError: 'Error getting data',
        passwordNotMatch: 'Fields \'New password\' and \'Confirm password\' don\'t match'
    },
    eServicesSettings:{
        changeSettingsTitle: 'Change e-services settings',
        serviceProviderName: 'Service provider name',
        serviceProviderBank: 'Service provider bank',
        serviceProviderBic: 'BIC',
        serviceProviderIban: 'IBAN',
        currency: 'Currency',
        seizedPropertyCertificateRequestExpirationDays: 'Seized property certificate request expiration days',
        seizedPropertyCertificateFee: 'Fee for Seized property certificate',
        seizedPropertyCertificateReason: 'Payment reason',
        seizedPropertyReportRequestExpirationDays: 'Seized property by owner report request expiration days',
        seizedPropertyByOwnerReportFee: 'Fee for Seized property by owner report',
        seizedPropertyReportReason: 'Payment reason',
        administrativeServiceNotificationUrl: 'URL for notifications on payment request status change'
    },
    success: {
        successfullyCreatedEntry: 'Successfully saved',
        successfullyEditedEntry: 'Successfully edited'
    },
    home: {
        title: 'Item search',
        search_v: 'Search',
        searchMinLength: 'Enter at least 3 symbols to search',
        search_n: 'Search',
        newAnnouncement: 'New announcement',
        publicSaleAnnouncements:'Electronic public sale announcement',
        electronicPublicSale: 'Electronic public sale',
        auctions: 'Auctions'
    },
    login: {
        certificateLogin: 'Digital signature login',
        eAuthLogin: "e-Identification",
        email: 'Email',
        forgotPassword: 'Forgot password?',
        or: 'or',
        password: 'Password',
        newUser: 'New user',
        submit: 'Login',
        title: 'System login',
        userName: 'User name'
    },
    loginResult: {
        clientCertLoginError: "An error occurred while signing in with an electronic signature",
        certLoginRequiredEmail: "To register you must provide an email",
        duplicateEmail: "User with this email exist"
    },
    resetPassword: {
        forgottenPasswordHelp: 'To recover the password you need to enter a username and press the "Submit" button.',
        forgottenPasswordSuccessTitle: 'Password recovery link sent',
        forgottenPasswordSuccessBody: 'You will receive an email, entered by the user, with a link to the next steps.',
        resetPasswordSuccessTitle: 'Password successfully changed',
        resetPasswordSuccessBody: 'Log in using your new password.',
    },
    menu: {
        administration: 'Administration',
        announcements: 'Announcements',
        auctionRegistrations: 'Participants registration',
        auctions: 'Auctions',
        debtors: 'Debtors',
        home: 'Home',
        login: 'Login',
        logs: 'System logs',
        orders: 'Orders',
        organizationalStructure: 'Organization structure',
        property: 'Property',
        protocols: 'Protocols',
        publicSale: 'Public sale',
        register: 'Register',
        users: 'Users',
        usersGroups: 'Users groups',
        usersRoles: 'Users roles',
        distraints: 'Distraints',
        requestsForCertificateOfDistraintOfPropertyList: 'Sent requests for existence of distraint of property',
        timestamp: 'Timestamp',
        seizedPropertyAvailabilityRequest: 'Seized property availability request',
        request: 'Request',
        listOfRequests: 'Requests list',
        ePayments: 'Payment requests'
    },
    notifications: {
        certLoginRequiredEmail: "You must provide valid email address to log in to the system",
        certLoginOptionalEmail: "If you don't fill the Email, it will be taken out from your digital signature.",
        clientCertLoginError: "Digital signature login error",
        confirmationEmailResend: "New cofirmation message was send to your account email address",
        deleteSuccess: "Data deleted successfully",
        duplicateEgn: "User with the same ID already exists",
        duplicateEmail: "User with the same email already exists",
        duplicateUsername: "User with the same username already exists",
        emailNotConfirmed: "Your Email is not confirmed.",
        errorLoadingData: "Error while loading data",
        errorUploadingFiles: "Error while uploading files",
        invalidData: "Invalid data",
        notConfirmedByAdmin: "Your account is not approved by system admin yet",
        saveSuccess: "Data saved successfully",
        serverError: "Server error. Please try again later",
        successUploadingFiles: "Files uploaded successfully",
        userNotFound: "User not found",
        roleConflict: 'Role already exists'
    },
    personType: {
        person: 'Person',
        company: 'Company'
    },
    propertiesList: {
        properties: {
            id: "Id",
            identifier: "Estate identifier",
            identifierType: "Identifier type",
            description: "Description",
            type: "Type",
            floor: "Floor",
            area: "Area is sq.m.",
            construction: "Construction type"
        },
        otherProperties: {
            id: "Id",
            identifier: "Identifier",
            description: "Description",
            type: "Type",
            name: "Name"
        },
        vehicles: {
            approvalType: "Approval type",
            capacity: "Capacity",
            color: "Color",
            category: "Category",
            engineNumber: "Engine number",
            environmentalCategory: "Environmental category",
            fuel: "Fuel",
            id: "Id",
            firstRegistrationDate: "First registration date",
            massF1: "Mass F1",
            massF2: "Mass F2",
            massF3: "Mass F3",
            massG: "Mass",
            maxPower: "Max power",
            model: "Model",
            offRoadSymbols: "Offroad symbols",
            registrationNumber: "Registration number",
            tradeDescription: "Trade description",
            typeApprovalNumber: "Type approval number",
            vehicleDocumentDate: "Vehicle document date",
            vehicleDocumentNumber: "Vehicle document number",
            vehicleMassO1: "Mass 01",
            vehicleMassO2: "Mass 02",
            vehicleNumOfAxles: "Number of axles",
            vehicleType: "Vehicle type",
            vin: "VIN",
            owners: {
                tableTitle: "Owners:",
                id: "ID",
                bulgarianCitizenPin: "Bulgarian citizen pin",
                bulgarianCitizenFirstName: "Bulgarian citizen first name",
                bulgarianCitizenMiddleName: "Bulgarian citizen middle name",
                bulgarianCitizenLastName: "Bulgarian citizen last name",
                foreignCitizenPin: "Foreign citizen pin",
                foreignCitizenPn: "Foreign citizen pn",
                foreignCitizenNamesCyrillic: "Foreign citizen names (cyrillic)",
                foreignCitizenNamesLatin: "Foreign citizen names (latin)",
                foreignCitizenNationality: "Foreign citizen nationality",
                companyId: "Company id",
                companyName: "Company name",
                companyNameLatin: "Company name (latin)",
            },
            users: {
                tableTitle: "Users:",
                id: "ID",
                bulgarianCitizenPin: "Bulgarian citizen pin",
                bulgarianCitizenFirstName: "Bulgarian citizen first name",
                bulgarianCitizenMiddleName: "Bulgarian citizen middle name",
                bulgarianCitizenLastName: "Bulgarian citizen last name",
                foreignCitizenPin: "Foreign citizen pin",
                foreignCitizenPn: "Foreign citizen pn",
                foreignCitizenNamesCyrillic: "Foreign citizen names (cyrillic)",
                foreignCitizenNamesLatin: "Foreign citizen names (latin)",
                foreignCitizenNationality: "Foreign citizen nationality",
                companyId: "Company id",
                companyName: "Company name",
                companyNameLatin: "Company name (latin)",
            }
        },
        aircrafts: {
            id: "Id",
            producerName: "Producer",
            producerNameEn: "Producer (en)",
            producerCountryCode: "Producer country code",
            producerCountryName: "Producer country",
            airCategoryCode: "Air category code",
            airCategoryName: "Air category",
            icao: "ICAO",
            msnserialNumber: "Serial number",
            modelName: "Model",
            modelNameEn: "Model (en)",
            debts: {
                noDataText: "No debts",
                tableTitle: "Debts:",
                id: "Id",
                inputDate: "Input date",
                debtTypeCode: "Debt type code",
                debtType: "Debt type",
                isActive: "Active",
                applicantIdentifier: "Applicant identifier",
                applicantName: "Applicant name",
                documentIncomingNumber: "Document incoming number",
                documentIncomingDate: "Document incoming date",
                documentExternalNumber: "Document external number",
                documentExternalDate: "Document external date",
                repaymentDate: "Repayment date",
                repaymentDocumentIncomingNumber: "Repayment document incoming number",
                repaymentDocumentIncomingDate: "Repayment document incoming date",
                repaymentDocumentExternalNumber: "Repayment document external number",
                repaymentDocumentExternalDate: "Repayment document external date",
                repaymentNotes: "Repayment notes",
                notes: "Notes",
            },
            registrations: {
                noDataText: "No registrations",
                tableTitle: "Registrations:",
                id: "Id",
                actNumber: "Act number",
                registrationNumber: "Registration number",
                registrationDate: "Registration date",
                registrationMark: "Registration mark",
                isLastRegistration: "Last registration",
                registrationStatusIsActive: "Active registration",
                registrationStatusCode: "Status code",
                registrationStatusName: "Status name",
                registrationDocumentNumber: "Registration document number",
                registrationDocumentDate: "Registration document date",
                registrationDocumentDescription: "Registration document description",
                deregistrationDate: "Deregistration date",
                deregistrationReason: "Deregistration reason",
                deregistrationDescription: "Deregistration description",
                deregistrationCountryCode: "Deregistration country code",
                deregistrationCountryName: "Deregistration country name",
                leasingDocumentNumber: "Leasing document number",
                leasingDocumentDate: "Leasing document date",
                leasingEndDate: "Leasing end date",
                leasingAgreement: "Leasing agreement",
                leasingLessorPersonIdentifier: "Lessor person identifier",
                leasingLessorPersonNames: "Lessor person names",
                leasingLessorEntityIdentifier: "Lessor entity identifier",
                leasingLessorEntityName: "Lessor entity names",

            }
        },
        vessels: {
            id: "Id",
            ownerIdentifier:'Owner identifier',
            bt: 'BT',
            nt: 'NT',
            maxLength: 'Max length',
            lengthBetweenPerpendiculars: 'Length between perpendiculars',
            maxWidth: 'Max width',
            waterplane: 'Waterplane',
            shipboardHeight: 'Shipboard height',
            deadweight: 'Deadweight',
            numberOfEngines: 'Number of engines',
            enginesFuel: 'Engines fuel',
            sumEnginePower: 'Sum engine power',
            bodyNumber: 'Body number',
            engines: {
                list: 'Engines',
                id: 'Id',
                systemModification: 'System modification',
                engineNumber: 'Engine number',
                power: 'Power',
                type: 'Type',
            },
            owners: {
                list: 'Owners',
                id: 'Id',
                isCompany: 'Company',
                companyName: 'Company name',
                eik: 'EIK',
                personFirstName: 'Person first name',
                personMiddleName: 'Person sur name',
                personLastName: 'Person family name',
                egn: 'EGN',
                imoNumber: 'IMO number',
                isUser: 'User',
                address: 'Address',
            },
            registrationData: {
                data: 'Registration data',
                shipName: 'Ship name',
                shipNameLatin: 'Ship name latin',
                registrationPort: 'Registration port',
                registrationNumber: 'Registration number',
                tom: 'Tom',
                page: 'Page',
                type: 'Type',
                status: 'Status',
            }
        }
    },
    register: {
        backToLogin: 'Back to Login',
        certificateRegister: 'Digital signature registration',
        chiNumber: 'Private court enforcer register number',
        eAuthRegister: "e-Identification registration",
        email: 'Email',
        firstName: 'Name',
        lastName: 'Last name',
        middleName: 'Middle name',
        password: 'Password',
        repeatPassword: 'Repeat password',
        submit: 'Register',
        title: 'Registration',
        userName: 'User name',
        userType: 'User type',
        registerType: 'Registration method'
    },
    regixCompany: {
        legalFormAbbr: 'Legal form abbreviation',
        legalFormName: 'Legal form name',
        name: 'Name',
        statusName: 'Account status',
        uic: "UIC",
    },
    regixPerson: {
        dateOfBirth: "Date of birth",
        dateOfDeath: 'Date of death',
        firstName: 'First name',
        identifier: 'EGN',
        lastName: 'Last name',
        middleName: 'Middle name',
        searchIdentifier: 'Identifier'
    },
    systemLogs: {
        title: 'System logs',
        search: 'Search',
        itemsPerPage: 'Items per page',
        dateRange: 'Select a time period',
        headers: {
            actionName: 'Action name',
            controller: 'Controller',
            data: 'Data',
            id: 'Id',
            message: 'Message',
            requestMethod: 'Request method',
            result: 'Result',
            serverTimeUtc: 'Server time',
            userId: 'User Id',
            ip: 'Ip',
            duration: 'Duration',
            responseStatusCode: 'Response status code'
        },
        systemSettings: {
            title: 'Check connections to integrated systems',
            connectionWithRegix: 'Connection with Regix'
        }
    },
    agriculturalMachinery: {
        id: 'Id',
        title: 'Register of agricultural machinery',
        createMachine: 'Register machine',
        registerMachine: 'Register machine',
        machine: 'machine',
        editMachine: 'Edit machine',
        registrationNumber: 'Registration number',
        frameNumber: 'Frame number',
        type: 'Type',
        typeOfOwner: 'Owner',
        registerPerson: 'Register as Person',
        registerCompany: 'Register as Company',
        confirmDelete: 'Confirm delete',
        create: 'Registrate',
        headers: {
            registrationNumber: 'Registration number',
            frameNumber: 'Frame Number',
            type: 'Type',
            owner: 'Owner',
            actions: 'Actions'
        },
        messages: {
            successfullyCreated: 'Successfully created!',
            successfullyEdited: 'Successfully edited!',
            successfullyDeleted: 'Successfully deleted!',
            confirmDeleteMessage: 'Do you really want to delete it?',
        }
    },
    userProfile: {
        title: 'User profile',
        changePassword: 'Change password',
        personalData: 'Personal data',
        password: 'Password',
        newPassword: 'New password',
        confirmPassword: 'Confirm password',
        userRoles: 'User roles',
    },
    usersRoles: {
        title: 'Users roles',
        headers: {
            userRole: 'Role',
            actions: 'Actions'
        },
        edit: 'Edit role',
        create: 'Create role',
        name: 'Role name',
        users: 'Users'
    },
    users: {
        search: 'Search',
        title: 'Users',
        edit: 'Edit'
    },
    seizedPropertyAvailabilityRequest: {
        title: 'Seized property availability request',
        newRequest: 'New request',
        id: 'Id',
        date: 'Date',
        search: 'Search',
        name: 'First name',
        middleName: 'Middle name',
        lastName: 'Last name',
        egn: 'Identity number',
        phone: 'Phone',
        actualEmail: 'Actual email',
        inTheQualityOf: 'In quality of',
        nameOfTheCompanyOrPerson: 'Company name or person name',
        bulstat: 'BULSTAT',
        companyCaseNumber: 'Company case number',
        requesterPerson: 'Requester',
        checkedPerson: 'Checked person',
        personType: 'Person type',
        report: 'Report',
        newSearch: 'New search'
    },
    person: {
        person: 'Person',
        firstName: 'First name',
        middleName: 'Middle name',
        lastName: 'Last name',
        phone: 'Phone',
        email: 'Email',
        validEmail: 'Enter a valid email address',
        egn: 'Identification number',
        ln4: 'Personal identification of a foreigner',
        egnln4: 'Identification number / Personal identification of a foreigner',
        number: 'Number',
        identificationType: 'Identification type',
        identifier: 'Identifier',
        invalidRegixPerson: 'Invalid person!',
        invalidRegixCompany: 'Invalid company!',
        validateInRegix: 'Validation in Regix',
        populatingAddress: 'Populating address',
        physicalPerson: 'Physical person'
    },
    company: {
        company: 'Company',
        name: 'Name',
        eik: 'EIK',
        companyCaseNumber: 'Company case number',
        representativeOf: 'Representative of'
    },
    viewDistraint: {
        title: "View distraint"
    },
    RequestForCertificateOfDistraintOfProperty: {
        requestTitle: "Request for issue of digital certificate of existence of distraint of property",
        propertyIdOther: "ID of other property",
        firstName: "First name",
        middleName: "Middle name",
        lastName: "Last name",
        personalIdentifier: "Personal identifier",
        phoneNumber: "Phone",
        email: "E-mail",
        currentEmailIfDifferentFromTheOneInUserProfile: "Current e-mail if different from indicated in user profile",
        as: "В качеството на",
        nameOfLegalEntityOrOfRepresentedPerson: "Name of legal entity or of represented person",
        legalEntityIdentifier: "Legal entity identifier",
        companyCaseNumber: "Company case number",
        makeRequest: "Make request",
        requestsListTitle: "Sent requests for issue of digital certificate of existence of distraint of property",
        list: {
            id: "ID",
            firstName: "First name",
            middleName: "Middle name",
            lastName: "Last name",
            personalIdentifier: "Personal identifier",
            region: "Region",
            municipality: "Municipality",
            city: "City",
            streetAddress: "Address",
            phoneNumber: "Phone",
            email: "E-mail",
            userType: "As",
            nameOfLegalEntity: "Name of legal entity or of represented person",
            identifierOfLegalEntity: "Legal entity identifier",
            regionOfLegalEntity: "Region - legal entity",
            municipalityOfLegalEntity: "Municipality - legal entity",
            cityOfLegalEntity: "City - legal entity",
            streetAddressOfLegalEntity: "Address - legal entity",
            companyCaseNumber: "Company case number",
            propertyId: "ID of property",
            propertyType: "Property type",
            propertyIdentifier: "Property identifier",
            personalIdentifierType: "Property ID type",
            createdOn: "Created on",
            paymentStatusName: "Payment status"
        }
    },
    auctions: {
        registrations: {
            approve: {
                status: 'Status',
                waitingApproval: 'Waiting approval',
                approved: 'Approved',
                denied: 'Denied',
                reason: 'Reason:',
                approve: 'Approve',
                deny: 'Deny',
                approveRegistration: 'Approve registration?',
                denyRegistration: 'Deny registration?',
                editSuccess: 'Successfully edited entry'
            },
            list: {
                title: 'Electronic public sale registration',
                preview: 'Preview',
                headers: {
                    uniqueNumber: 'Unique number',
                    participant: 'Participant/Representative person',
                    announcementCode: 'Announcement code',
                    announcementTitle: 'Announcement',
                    isApproved: 'Approved',
                    actions: 'Actions'
                }
            },
            register: {
                title: 'Electronic public sale registration',
                participant: 'Participant',
                applicationSubmission: 'The application shall be submitted to the bailiff\'s office',
                participantType: 'Participation type',
                as: 'As',
                representedPerson: 'Represented person',
                additionalInfo: 'Additional information',
                receiveResultWay: 'A way to provide the result of the service',
                propertyOwner: 'Property owner',
                isOwnerSpouse: 'I am in a civil marriage with the owner (debtor) of the property',
                attachedFiles: 'Attached files',
                uniqueNumber: 'Unique number',

            },
        },
        announcements: {
            display: {
                title: 'Announcements - details',
                register: 'Registration'
            },
            list: {
                title: 'Electronic public sale - announcement',
                preview: 'Preview',
                headers: {
                    code: 'Announcement code',
                    title: 'Title',
                    startPrice: 'Start price',
                    actionOrder: 'Action order',
                    propertyType: 'Property type',
                    registerStartDate: 'Registration start:',
                    registerEndDate: 'Registration end',
                    auctionStartDate: 'Auction from',
                    auctionEndDate: 'Auction to',
                    actions: 'Actions',
                    registersCount: 'Registrations count',
                    step: 'Step',
                    from: 'From',
                    to: 'To (automatically calculated)',
                    registerPeriod: 'Registration period for participation',
                    auctionPeriod: 'Auction period',
                    auctionExecutionStartDate: 'Auction - From',
                    auctionExecutionEndDate: 'Auction - To',
                    description: 'Description',
                    attachedFiles: 'Attached files',
                    auctionInfo: 'Auction information',
                    auctionAssets: 'Assets included in announcement'
                }
            },
            myList: {
                title: 'Electronic public sale - announcements',
                create: 'New announcement',
                details: 'Preview',
                edit: 'Edit',
                delete: 'Delete',
                deleteAnnouncement: 'Delete announcement?',
            },
            create: {
                title: 'Electronic public sale new announcement',
                auctionInfo: 'Auction info',
                create: 'Creation',
                chooseType: 'Choose type',
                asset: 'Property/asset',
                property: 'Properties',
                creation: 'Create'
            },
            propertySearch: {
                title: 'Assets included in announcement',
                removeChosen: 'Remove chosen',
                addChosen: 'Add chosen',
                noAssets: 'No items added. Use the search to find the items you want in the NRZ or the \'Add items outside the NRZ\' button.',
                search: 'Assets search'
            },
        },
        auction: {
            title: 'Auction',
            saleItems: 'Items for sale',
            auctionEnd: 'Auction end:',
            startPrice: 'Start price:',
            step: 'Step:',
            currentHighestPrice: 'Currently highest price:',
            noBidRegistered: 'No bio registered',
            minimalPrice: 'The minimal price is',
            bid: 'Bid',
            logs: 'Logs',
            auctionOver: 'The auction is over!',
            finalPrice: 'Final price:',
            auctionWinner: 'You have won this auction!',
            auctionLoser: 'You failed to win the bid for this auction!',
            additionalInfo: 'You will receive additional information about the further steps in the way indicated by you for providing the result of the auction.',
            currency: 'lv.',
            timeLeft: 'Time left:'
        },
        display: {
            title: 'Announcement - details',
            registration: 'Participation registration'
        },
        list: {
            title: 'Auctions',
            current: 'Current',
            upComing: 'Upcoming',
            past: 'Past',
            participate: 'Participate',
            result: 'Result',
            headers: {
                code: 'Announcement code',
                announcement: 'Announcement',
                startDate: 'Start',
                endDate: 'End',
                startPrice: 'Start price',
                currentPrice: 'Current price'
            }
        }
    }
}
